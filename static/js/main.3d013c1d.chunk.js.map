{"version":3,"sources":["store/index.ts","api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Select","initialState","todos","userId","errorLoading","user","sort","actions","type","LOADING_TODOS","SELECT_USER","message","GET_ERROR","GET_USER","id","DELETE_TODO","selectors","state","store","createStore","action","filter","todo","API_URL","getTodos","a","fetch","response","json","getUser","removeTodo","method","Status","CurrentUser","useSelector","error","dispatch","useDispatch","useEffect","userFromServer","className","name","email","phone","onClick","TodoList","arr","useState","query","setQuery","appliedQuery","setAppliedQuery","All","status","setStatus","setSort","selectedUserId","applyQuery","useCallback","f","delay","timerId","clearTimeout","args","setTimeout","debounce","todosFilterByStatus","filteredTodos","title","toLowerCase","includes","Active","completed","Completed","todosForRender","x","y","localeCompare","handleRemoveTodo","value","onChange","event","target","map","disabled","classNames","App","errorMessage","todosFromServer","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d013c1d.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\n\nenum Select {\n  LOADING_TODOS = 'LOADING_TODOS',\n  SELECT_USER = 'SELECT_USER',\n  GET_ERROR = 'GET_ERROR',\n  GET_USER = 'GET_USER',\n  DELETE_TODO = 'DELETE_TODO',\n}\n\nexport type RootState = {\n  todos: Todo[];\n  userId: number;\n  errorLoading: string;\n  user: User | null,\n  sort: boolean,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  userId: 0,\n  errorLoading: '',\n  user: null,\n  sort: false,\n};\n\nexport const actions = {\n  loadingTodos: (todos: Todo[]) => ({\n    type: Select.LOADING_TODOS,\n    todos,\n  }),\n  selectUser: (userId: number) => ({\n    type: Select.SELECT_USER,\n    userId,\n  }),\n  getError: (message: string) => ({\n    type: Select.GET_ERROR,\n    message,\n  }),\n  getUser: (user: User) => ({\n    type: Select.GET_USER,\n    user,\n  }),\n  deleteTodo: (id: number) => ({\n    type: Select.DELETE_TODO,\n    id,\n  }),\n};\n\nexport const selectors = {\n  loadTodos: (state: RootState) => state.todos,\n  getUserId: (state: RootState) => state.userId,\n  getError: (state: RootState) => state.errorLoading,\n  loadUser: (state: RootState) => state.user,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case Select.LOADING_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case Select.SELECT_USER:\n      return {\n        ...state,\n        userId: action.userId,\n      };\n\n    case Select.GET_ERROR:\n      return {\n        ...state,\n        errorLoading: action.message,\n      };\n\n    case Select.GET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    case Select.DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n\nexport async function removeTodo(id: number) {\n  fetch(`${API_URL}/todos/${id}`, { method: 'DELETE' });\n}\n","import React, {\n  useState,\n  useCallback,\n} from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeTodo } from '../../api';\nimport './TodoList.scss';\n\nimport { actions, selectors } from '../../store';\n\nenum Status {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n\ntype FuncArg = (v: string) => void;\n\nconst debounce = (f: FuncArg, delay: number) => {\n  let timerId: number;\n\n  return (...args: string[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [status, setStatus] = useState(`${Status.All}`);\n  const [sort, setSort] = useState(false);\n\n  const todos = useSelector(selectors.loadTodos);\n  const selectedUserId = useSelector(selectors.getUserId);\n\n  const dispatch = useDispatch();\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const todosFilterByStatus = () => {\n    const filteredTodos = todos.filter(({ title }) => {\n      const changeTitle = title.toLowerCase();\n\n      return changeTitle.includes(appliedQuery.toLowerCase());\n    });\n\n    switch (status) {\n      case Status.Active:\n        return filteredTodos.filter(({ completed }) => !completed);\n\n      case Status.Completed:\n        return filteredTodos.filter(({ completed }) => completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  const sortList = (arr: Todo[]) => {\n    return [...arr]\n      .sort((x, y) => (x.title).localeCompare(y.title));\n  };\n\n  const todosForRender = sort\n    ? sortList(todosFilterByStatus())\n    : todosFilterByStatus();\n\n  const handleRemoveTodo = async (id: number) => {\n    await removeTodo(id);\n\n    dispatch(actions.deleteTodo(id));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <p>Search by title</p>\n      <label>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(event) => {\n            setQuery(event.target.value);\n            applyQuery(event.target.value);\n          }}\n        />\n      </label>\n      <select\n        value={status}\n        onChange={(event) => setStatus(event.target.value)}\n        className=\"TodoList__select\"\n      >\n        <option>All</option>\n        <option>Active</option>\n        <option>Completed</option>\n      </select>\n\n      <button\n        type=\"button\"\n        className=\"TodoList__additionButton\"\n        onClick={() => setSort(state => !state)}\n      >\n        Sort\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {todosForRender.map(({\n            userId,\n            completed,\n            title,\n            id,\n          }) => (\n            <li\n              className={`TodoList__item TodoList__item--${completed}`}\n              key={id}\n            >\n              <label>\n                <input type=\"checkbox\" disabled />\n                <p>{title}</p>\n              </label>\n\n              <div>\n                <button\n                  data-cy=\"userButton\"\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                    userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => dispatch(actions.selectUser(userId))}\n                >\n                  {userId ? `User ${userId}` : 'No user'}\n                </button>\n\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemoveTodo(id)}\n                  className=\"TodoList__deleteButton button\"\n                >\n                  🗑\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nimport { selectors, actions } from '../../store';\n\nexport const CurrentUser: React.FC = () => {\n  const userId = useSelector(selectors.getUserId);\n  const error = useSelector(selectors.getError);\n  const user = useSelector(selectors.loadUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const userFromServer = await getUser(userId);\n\n        dispatch(actions.getUser(userFromServer));\n      } catch {\n        dispatch(actions.getError('Can not load user'));\n      }\n    }\n\n    response();\n  }, [userId]);\n\n  return (\n    <>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            onClick={() => dispatch(actions.selectUser(0))}\n            className=\"CurrentUser__clear\"\n          >\n            Clear\n          </button>\n        </div>\n      ) : (<p>{error}</p>)}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport './App.scss';\n\nimport { getTodos } from './api';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport { selectors, actions } from './store';\n\nconst App = () => {\n  const selectedUserId = useSelector(selectors.getUserId);\n  const errorMessage = useSelector(selectors.getError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(actions.loadingTodos(todosFromServer));\n      } catch {\n        dispatch(actions.getError('Can not load todos'));\n      }\n    }\n\n    response();\n  }, []);\n\n  return (\n    <div>\n      <h1>Redux list of todos</h1>\n      {errorMessage.length === 0 ? (\n        <div className=\"App\">\n          <div className=\"App__sidebar\">\n            <TodoList />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </div>\n      ) : (<p className=\"App__error\">{errorMessage}</p>)}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}